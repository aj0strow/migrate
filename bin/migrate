#!/usr/bin/env node

// dependencies

var minimist = require('minimist')
var co = require('co')
var pkg = require('../package.json')
var argv = minimist(process.argv.slice(2))

// docs

var USAGE = `
  Usage:

   $ migrate [command] [options]

  Commands:

    up [prefix]    migrate up database (optional prefix for target)
    down [prefix]  migrate down database (optional prefix for target)

  Options:

    -h, --help          output usage information
    --version           output the version number
    -n, --count <n>     number of migrations
    --dir <path>        migrations directory (default pwd)
    --url/uri <url>     postgres url (default $DATABASE_URL)

  Examples:

    Run all pending migrations.

     $ migrate up --url postgres://localhost/dbname --dir db/migrations

    Undo the last three migrations.

     $ migrate down --dir db/migrations -n 3

    Redo the last migration with debug info.

     $ DEBUG=migrate migrate redo --dir db/migrations
`

// options

var args = argv._
var command = args.shift()

if (!command || argv.help || argv.h || command == 'help') {
  console.log(USAGE)
  process.exit(0)  
}

if (argv.version || argv.v || command == 'version') {
  console.log(pkg.version)
  process.exit(0)
}

var key = args.shift()
var count = argv.n || argv.count

if (key && count) {
  console.error('you must choose either a target file prefix or a migration count, not both')
  process.exit(1)
} else if (count) {
  count = +count
}

var dir = argv.dir

if (!dir) {
  dir = process.cwd()
}

var url = argv.url || argv.uri || process.env['DATABASE_URL']
if (!url) {
  console.error('couldnt determine database url')
  process.exit(1)
}

// script

var pg = require('../src/pg')
var parse = require('../src/parse')
var sync = require('../src/sync')
var migrate = require('../src/migrate')
var debug = require('../src/debug')

var db = pg(url)

co(function * () {
  yield db.connect()
  var structs = yield parse.dir(dir)
  if (!structs.length) {
    console.error('no sql files found in %s', dir)
    process.exit(1)
  }
  yield sync(db, structs)

  switch (command) {
  case 'up':
    yield migrate.up(db, key || count)
    break
  case 'down':
    yield migrate.down(db, key || count)
    break
  case 'redo':
    yield migrate.redo(db, count)
    break
  default:
    console.error('no command %s', command)
    process.exit(1)
  }
}).then(function () {
  debug('done')
  process.exit(0)
}).catch(function (e) {
  console.error(e)
  process.exit(1)
})
