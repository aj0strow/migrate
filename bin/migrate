#!/usr/bin/env node

// env

require('dotenv').load()

// dependencies

var minimist = require('minimist')
var co = require('co')
var util = require('util')
var chalk = require('chalk')
var fs = require('fs')
var path = require('path')
var moment = require('moment')
var pkg = require('../package.json')

// modules

var pg = require('../src/pg')
var parse = require('../src/parse')
var migrate = require('../src/migrate')
var lint = require('../src/lint')

// docs

var USAGE = `
 Usage:

  $ migrate [command] [arguments] [options]

 Commands:

  new  : create new migration file
  up   : migrate up database
  down : migrate down database
  redo : migrate down then back up
  lint : check migration files for inconsistencies

 Options:

  -h, --help          output usage information
  --version           output the version number
  -n, --limit <int>   number of migrations
  --all               migrate all files (default for up command)
  --dir <path>        migrations directory (default $MIGRATIONS_DIR)
  --url/uri <url>     postgres url (default $DATABASE_URL)

 Examples:

  Run all pending migrations.

   $ migrate up --url postgres://localhost/dbname --dir db/migrations

  Undo the last three migrations.

   $ migrate down -n 3

  Redo the last migration and debug this command.

   $ DEBUG=migrate migrate redo
`

// options

var argv = minimist(process.argv.slice(2))
var args = argv._
var command = args.shift()

if (!command || argv.help || argv.h || command == 'help') {
  console.log(USAGE)
  process.exit(0)  
}

if (argv.version || argv.v || command == 'version') {
  console.log(pkg.version)
  process.exit(0)
}

var url = argv.url || argv.uri || process.env['DATABASE_URL']
if (!url) {
  fail('could not determine database url')
}
var db = pg.createClient(url)


var dir = argv.dir || process.env['MIGRATIONS_DIR']
if (!dir) {
  fail('could not determine migrations dir')
}

if (command == 'new' || command == 'make') {
  var timestamp = moment().format('YYYYMMDDHHMMSS')
  var fd = path.join(dir, timestamp + '_' + args.shift() + '.sql')
  var file = '-- \n\n--+ up\n\n\n\n--+ down\n\n\n'
  fs.writeFile(fd, file, { encoding: 'utf8' }, function (e) {
    if (e) {
      fail('%s: %s', e.name, e.message)
    } else {
      process.exit(0)
    }
  })
  return
}

var options = {}
options.limit = argv.n || argv.limit
if (options.all) {
  options.limit = false
}

co(function * () {

  yield db.connect()
  yield db.init()
  var heads = yield parse.heads(dir)
  if (!heads.length) {
    fail('no sql files found in %s', dir)
  }

  switch (command) {
  case 'up':
  case 'down':
  case 'redo':
    return yield migrate[command](db, heads, options)
  case 'lint':
    var migrations = yield heads.map(parse.body)
    var errors = yield lint(db, migrations)
    errors.forEach(printlint)
    if (errors.length) { process.stderr.write('\n') }
    return
  default:
    fail('no command %s', command)
  }

}).then(function () {
  process.exit(0)
}).catch(function (e) {
  console.error(e)
  fail('%s: %s', e.name, e.message)
})

// helpers

function fail () {
  var str = util.format.apply(util, arguments)
  process.stderr.write(chalk.red(str) + '\n')
  process.exit(1)
}

function printlint (error) {
  process.stderr.write('\n ' + chalk.red(error.id) + '\n ')
  switch (error.code) {
  case 'insert':
    return process.stderr.write('file added at illegal sort index\n')
  case 'delete':
    return process.stderr.write('file deleted but migration still exists\n')
  case 'update':
    process.stderr.write('file changed after migration\n')
    process.stderr.write('\n')
    return error.data.forEach(printdiff)
  }
}

function printdiff (data) {
  var lines = data.value.split('\n').map(function (line) {
    if (data.added) {
      return chalk.green('+' + line)
    } else if (data.removed) {
      return chalk.red('-' + line)
    } else {
      return chalk.gray(' ' + line)
    }
  })
  lines.forEach(function (line) {
    process.stderr.write(line + '\n')
  })
}
